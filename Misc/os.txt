# ifelse
if [ $a -gt $b ]
then
	if [ $a -gt $c ]
	then

    else
	fi
elif [ $b -gt $c ]
avg=`echo "scale=2; ($a+$b+$c)/3" | bc`

# fork
#include <sys/types.h>
#include <sys/wait.h>
#include <stdio.h>
#include <unistd.h>

int main(int argc, char const *argv[])
{
	pid_t pid[5]; int status[5];	int c=0;	int i=0;
	for ( i = 0; i < 5; ++i){
		pid[i] = fork();
		if (pid[i] < 0){
			printf("\nChild %d Not Created\n",i+1 );
			return -1;
		}
		if (pid[i]==0){
			printf("\nChild %d with PID = %d\n", i+1, getpid());
			sleep(10);
			break; 
		}
		else{
			printf("\nParent PID: %d Doing its work %d\n", getpid(),i+1);
			c++;
			sleep(10);
        }}
		switch(i){
			case 0:
				if(pid[i]==0)
					execlp("firefox","firefox",NULL);
				break;

# thread

#include<stdio.h>
#include<unistd.h>
#include<pthread.h>

int g_var=10;
void *func1(void *input){       
	printf("In func1\n");	g_var++;
	printf("Global var count in func1 :%d\n",g_var);}
void *func2(void *input){
	printf("In func 2\n");
	g_var++;
	printf("Global var count in func2 :%d\n",g_var);}
int main(){
	pthread_t tid[2];
	//create	pthread_create(&tid[0],NULL,func1,NULL);
	pthread_create(&tid[1],NULL,func2,NULL);
	//join	pthread_join(tid[0],NULL);
	pthread_join(tid[1],NULL);

	pthread_mutex_init(&lock, NULL);
	pthread_mutex_destroy(&lock);